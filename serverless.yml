# NOTE: update this with your service name
service: serverless-graphql-nodejs-starter

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  serverless-offline:
    port: 4000
  bundle:
    linting: false

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: ${opt:stage, self:provider.stage}
  TabkeDB: ${self:custom.stage}-tableDB
  tableThroughputs:
    prod: 1
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment:
  #name_of_var: ${env:NAME_OF_VAR}
  #tableDB: ${self:custom.tableDB}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [TableDB, Arn]

functions:
  graphql:
    handler: src/graphql.graphqlHandler
    environment:
      SLS_DEBUG: true
    events:
      - http:
          path: graphql
          method: post
          cors: true
          integration: lambda-proxy

      - http:
          path: graphql
          method: get
          cors: true
          integration: lambda-proxy

resources:
  - ${file(resources/sqs-queue.yml)}
  - ${file(resources/table.yml)}
  - ${file(resources/s3-bucket.yml)}
